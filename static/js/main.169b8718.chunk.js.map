{"version":3,"sources":["components/TodoList/TodoList.tsx","components/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectId","selectedtodoId","useState","inputValue","setinputValue","selectValue","setselectValue","visibleTodo","filter","todo","title","toLowerCase","includes","completed","className","htmlFor","id","type","value","onChange","event","target","name","map","readOnly","onClick","userId","API_URL","CurrentUser","selectUser","user","setUser","useEffect","url","fetch","then","res","ok","Error","status","statusText","json","selectedUser","email","phone","App","setUserId","setTodos","todoID","setTodoID","userID","todoId","ReactDOM","render","document","getElementById"],"mappings":"mSAWaA,EACT,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,eACpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCF,mBAAS,OAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KAEIC,EAAcR,EAAMS,QAAO,SAAAC,GAC7B,OAAIA,EAAKC,MAAMC,cAAcC,SAAST,EAAWQ,eACxCF,EAGF,MAGT,OAAQJ,GACN,IAAK,MACHE,EAAcA,EAAYC,QAAO,SAAAC,GAAI,OAAIA,KACzC,MACF,IAAK,SACHF,EAAcA,EAAYC,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKI,aAC9C,MACF,IAAK,YACHN,EAAcA,EAAYC,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKI,aAMlD,OACE,sBAAKC,UAAU,WAAf,UACE,wCAEA,sBAAKA,UAAU,2BAAf,UACE,wBAAOC,QAAQ,QAAf,mBAEG,IACD,uBACEC,GAAG,QACHC,KAAK,OACLC,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAWhB,EAAcgB,EAAMC,OAAOH,aAGpD,yBACEI,KAAK,eACLN,GAAG,eACHE,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAWd,EAAec,EAAMC,OAAOH,QAJnD,UAME,wBAAQA,MAAM,MAAd,iBAGA,wBAAQA,MAAM,SAAd,oBAGA,wBAAQA,MAAM,YAAd,0BAIF,oBAAIJ,UAAU,iBAAd,SACGP,EAAYgB,KAAI,SAAAd,GAAI,OACnB,qBAAIK,UAAS,yCAAoCb,IAAmBQ,EAAKO,GAAK,UAAY,aAA1F,UACE,kCACGf,IAAmBQ,EAAKO,GACvB,uBACEC,KAAK,WACLO,UAAQ,EACRC,QAAS,WACPzB,EAAS,EAAG,MAIhB,uBACEiB,KAAK,WACLO,UAAQ,EACRC,QAAS,WACPzB,EAASS,EAAKiB,OAAQjB,EAAKO,OAIjC,4BAAIP,EAAKC,WAGX,yBACEI,UAAU,gEAIVG,KAAK,SALP,qBAQGR,EAAKiB,YA9BoGjB,EAAKO,gBCrE3HW,G,MAAU,sCCQT,IAAMC,EAA+B,SAAC,GAA4B,IAA1BF,EAAyB,EAAzBA,OAAQG,EAAiB,EAAjBA,WACrD,EAAwB3B,qBAAxB,mBAAO4B,EAAP,KAAaC,EAAb,KASA,OAPAC,qBAAU,WDEL,IAAiBC,KCDZP,EDEHQ,MAAM,GAAD,OAbI,4CAaJ,OAAgBD,IACzBE,MAAK,SAAAC,GACJ,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAJ,UAAaF,EAAIG,OAAjB,cAA6BH,EAAII,aAGzC,OAAOJ,EAAIK,WCPVN,MAAK,SAAAO,GACJX,EAAQW,QAEX,CAAChB,IAGF,qBAAKZ,UAAU,cAAf,SACGgB,GACC,qCACE,oBAAIhB,UAAU,qBAAd,SACE,kDAEGgB,EAAKd,QAGV,oBAAIF,UAAU,oBAAd,SAAmCgB,EAAKR,OACxC,mBAAGR,UAAU,qBAAb,SAAmCgB,EAAKa,QACxC,mBAAG7B,UAAU,qBAAb,SAAmCgB,EAAKc,QACxC,wBAAQ3B,KAAK,SAASQ,QAAS,kBAAMI,EAAW,IAAhD,yBCgBKgB,EAzCO,WACpB,MAA4B3C,mBAAS,GAArC,mBAAOwB,EAAP,KAAeoB,EAAf,KACA,EAA0B5C,mBAAiB,IAA3C,mBAAOH,EAAP,KAAcgD,EAAd,KACA,EAA4B7C,mBAAS,GAArC,mBAAO8C,EAAP,KAAeC,EAAf,KASA,OAPAjB,qBAAU,WFRL,IAAkBC,KESZ,QFRJC,MAAM,GAAD,OAAIP,GAAJ,OAAcM,IACvBE,MAAK,SAAAC,GAAG,OAAIA,EAAIK,WEQdN,MAAK,SAAA1B,GACJsC,EAAStC,QAEZ,IAGD,sBAAKK,UAAU,MAAf,UACE,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,CACEf,MAAOA,EACPC,SAAU,SAACkD,EAAQC,GACjBL,EAAUI,GACVD,EAAUE,IAEZlD,eAAgB+C,MAIpB,qBAAKlC,UAAU,eAAf,SACE,qBAAKA,UAAU,yBAAf,SACc,IAAXY,EACC,cAAC,EAAD,CACEA,OAAQA,EACRG,WAAY,SAACqB,GACXJ,EAAUI,MAGZ,2BCvCdE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.169b8718.chunk.js","sourcesContent":["// import { type } from 'os';\nimport './TodoList.scss';\nimport React, { useState } from 'react';\nimport { Todo } from '../types';\n\ntype Props = {\n  todos: Todo[]\n  selectId: (userId: number, todoID: number) => void\n  selectedtodoId: number,\n};\n\nexport const TodoList: React.FC<Props>\n  = ({ todos, selectId, selectedtodoId }) => {\n    const [inputValue, setinputValue] = useState('');\n    const [selectValue, setselectValue] = useState('all');\n\n    let visibleTodo = todos.filter(todo => {\n      if (todo.title.toLowerCase().includes(inputValue.toLowerCase())) {\n        return todo;\n      }\n\n      return '';\n    });\n\n    switch (selectValue) {\n      case 'all':\n        visibleTodo = visibleTodo.filter(todo => todo);\n        break;\n      case 'active':\n        visibleTodo = visibleTodo.filter(todo => todo.completed === false);\n        break;\n      case 'completed':\n        visibleTodo = visibleTodo.filter(todo => todo.completed === true);\n        break;\n      default:\n        break;\n    }\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <label htmlFor=\"input\">\n            Filter\n            {' '}\n            <input\n              id=\"input\"\n              type=\"text\"\n              value={inputValue}\n              onChange={(event) => setinputValue(event.target.value)}\n            />\n          </label>\n          <select\n            name=\"visibleTodos\"\n            id=\"visibleTodos\"\n            value={selectValue}\n            onChange={(event) => setselectValue(event.target.value)}\n          >\n            <option value=\"all\">\n              All\n            </option>\n            <option value=\"active\">\n              Active\n            </option>\n            <option value=\"completed\">\n              Completed\n            </option>\n          </select>\n          <ul className=\"TodoList__list\">\n            {visibleTodo.map(todo => (\n              <li className={`TodoList__item TodoList__item--${selectedtodoId === todo.id ? 'checked' : 'unchecked'}`} key={todo.id}>\n                <label>\n                  {selectedtodoId === todo.id ? (\n                    <input\n                      type=\"checkbox\"\n                      readOnly\n                      onClick={() => {\n                        selectId(0, 0);\n                      }}\n                    />\n                  ) : (\n                    <input\n                      type=\"checkbox\"\n                      readOnly\n                      onClick={() => {\n                        selectId(todo.userId, todo.id);\n                      }}\n                    />\n                  )}\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\"\n                  type=\"button\"\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  };\n","import { Todo, User } from './types';\n\nconst API_URL = 'https://mate.academy/students-api/';\nconst API_USERS = 'https://mate.academy/students-api/users/';\n\nexport function getTodos(url: string): Promise<Todo[]> {\n  return fetch(`${API_URL}${url}`)\n    .then(res => res.json());\n}\n\nexport function getUsers(url: string): Promise<User[]> {\n  return fetch(`${API_URL}${url}`)\n    .then(res => res.json());\n}\n\nexport function getUser(url: number): Promise<User> {\n  return fetch(`${API_USERS}${url}`)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} - ${res.statusText}`);\n      }\n\n      return res.json();\n    });\n}\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../types';\nimport { getUser } from '../api';\n\ntype Props = {\n  userId: number,\n  selectUser: (userId: number) => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, selectUser }) => {\n  const [user, setUser] = useState<User>();\n\n  useEffect(() => {\n    getUser(userId)\n      .then(selectedUser => {\n        setUser(selectedUser);\n      });\n  }, [userId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user && (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {user.id}\n            </span>\n          </h2>\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n          <button type=\"button\" onClick={() => selectUser(0)}>\n            Clear\n          </button>\n        </>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './components/api';\nimport { Todo } from './components/types';\n\nconst App: React.FC = () => {\n  const [userId, setUserId] = useState(0);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [todoID, setTodoID] = useState(0);\n\n  useEffect(() => {\n    getTodos('todos')\n      .then(todo => {\n        setTodos(todo);\n      });\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          selectId={(userID, todoId) => {\n            setUserId(userID);\n            setTodoID(todoId);\n          }}\n          selectedtodoId={todoID}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userId !== 0 ? (\n            <CurrentUser\n              userId={userId}\n              selectUser={(userID: number) => {\n                setUserId(userID);\n              }}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}